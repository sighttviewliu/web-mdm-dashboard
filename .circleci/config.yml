version: 2

references:
  # Configuration
  workspace: &workspace
    ~/flyve

  docker_image: &docker_image
    kkarczmarczyk/node-yarn

  container_config: &container_config
    docker:
      - image: *docker_image
    working_directory: *workspace

  transifex_config: &transifex_config
    run:
      name: Configure transifex
      command: source ci/scripts/transifex_config.sh

  transifex_sync: &transifex_sync
    run:
      name: Synchronize translations to transifex
      command: source ci/scripts/transifex_sync.sh

  # Dependencies
  system_install: &system_install
    run:
      name: Update system dependencies
      command: source ci/scripts/system_install.sh

  node_install: &node_install
    run:
      name: Install node dependencies
      command: source ci/scripts/node_install.sh

  python_install: &python_install
    run:
      name: Install python dependencies
      command: source ci/scripts/python_install.sh

  # Build application
  build_app: &build_app
    run:
      name: "Build application"
      command: |
        source ci/scripts/create_config_file.sh
        yarn build

  # Test configuration
  start_server: &start_server
    run:
      name: Start server in background
      command: node scripts/start.js > ../yarn.log
      background: true

  unit_test: &unit_test
    run:
      name: Run unit tests
      command: yarn test

  end_to_end_test: &end_to_end_test
    run:
      name: Run End-to-End tests
      command: |
        yarn cypress install
        until grep -m 1 'Compiled successfully!' ../yarn.log ; do true; done
        yarn test:cypress

  sonarwhal_test: &sonarwhal_test
    run:
      name: Run sonarwhal tests
      command: |
        until grep -m 1 'Compiled successfully!' ../yarn.log ; do true; done
        yarn test:sonarwhal

  validate_html: &validate_html
    run:
      name: Validate HTML
      command: html5validator --root build/

  # Settings deploy
  git_config: &git_config
    run:
      name: Configure GIT
      command: source ci/scripts/git_config.sh

  deploy_app: &deploy_app
    run:
      name: Deploy application
      command: source ci/scripts/deploy.sh

  # Handle cache
  node_key: &node_key
    yarn-dependencies-v1-{{ checksum "yarn.lock" }}

  build_key: &build_key
    build-app-v1-{{ .Environment.CIRCLE_WORKFLOW_ID }}

  screenshots_key: &screenshots_key
    screenshots-app-v1-{{ .Environment.CIRCLE_WORKFLOW_ID }}

  store_node_cache: &store_node_cache
    save_cache:
      key: *node_key
      paths:
        - node_modules
        - /root/.cache/Cypress

  store_build_cache: &store_build_cache
    save_cache:
      key: *build_key
      paths:
        - build

  store_screenshots: &store_screenshots
    save_cache:
      key: *screenshots_key
      paths:
        - cypress/screenshots

  restore_node_cache: &restore_node_cache
    restore_cache:
      key: *node_key

  restore_build_cache: &restore_build_cache
    restore_cache:
      key: *build_key

  restore_screenshots_cache: &restore_screenshots_cache
    restore_cache:
      key: *screenshots_key

  # Handle artifact
  build_artifact: &build_artifact
    run:
      name: Create build artifact
      command: |
        mkdir /tmp/artifacts
        zip -r ./build.zip build/* > /tmp/artifacts/build.zip

  store_build_artifact: &store_build_artifact
    store_artifacts:
      path: /tmp/artifacts
      destination: artifacts

jobs:
  build:
    <<: *container_config

    steps:
      - checkout
      - *system_install
      - *python_install
      - *restore_node_cache
      - *node_install
      - *store_node_cache
      - *transifex_config
      - *transifex_sync
      - *build_app
      - *store_build_cache

  test:
    <<: *container_config

    steps:
      - checkout
      - *system_install
      - *python_install
      - *restore_node_cache
      - *start_server
      - *unit_test
      - *end_to_end_test
      - *sonarwhal_test
      - *restore_build_cache
      - *validate_html
      - *store_screenshots

  deploy:
    <<: *container_config

    steps:
      - checkout
      - *system_install
      - *node_install
      - *python_install
      - *transifex_config
      - *transifex_sync
      - *start_server
      - *end_to_end_test
      - *build_app
      - *build_artifact
      - *store_build_artifact
      - *git_config
      - *deploy_app

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - master
